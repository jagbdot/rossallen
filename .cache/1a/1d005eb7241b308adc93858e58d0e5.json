{"id":"MnsR","dependencies":[{"name":"/Users/juan/Pictures/Ross-Finals/first/package.json","includedInParent":true,"mtime":1622214951000},{"name":"gsap","loc":{"line":1,"column":19},"parent":"/Users/juan/Pictures/Ross-Finals/first/src/js/demo1/menuItem.js","resolved":"/Users/juan/Pictures/Ross-Finals/first/node_modules/gsap/index.js"},{"name":"../utils","loc":{"line":2,"column":46},"parent":"/Users/juan/Pictures/Ross-Finals/first/src/js/demo1/menuItem.js","resolved":"/Users/juan/Pictures/Ross-Finals/first/src/js/utils.js"},{"name":"../../img/demo1/*.gif","loc":{"line":3,"column":38},"parent":"/Users/juan/Pictures/Ross-Finals/first/src/js/demo1/menuItem.js","resolved":"/Users/juan/Pictures/Ross-Finals/first/src/img/demo1/*.gif"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _gsap = require(\"gsap\");\n\nvar _utils = require(\"../utils\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar images = Object.entries(require('../../img/demo1/*.gif')); // track the mouse position\n\nvar mousepos = {\n  x: 0,\n  y: 0\n}; // cache the mouse position\n\nvar mousePosCache = mousepos;\nvar direction = {\n  x: mousePosCache.x - mousepos.x,\n  y: mousePosCache.y - mousepos.y\n}; // update mouse position when moving the mouse\n\nwindow.addEventListener('mousemove', function (ev) {\n  return mousepos = (0, _utils.getMousePos)(ev);\n});\n\nvar MenuItem = /*#__PURE__*/function () {\n  function MenuItem(el, inMenuPosition, animatableProperties) {\n    _classCallCheck(this, MenuItem);\n\n    // el is the <a> with class \"menu__item\"\n    this.DOM = {\n      el: el\n    }; // position in the Menu\n\n    this.inMenuPosition = inMenuPosition; // menu item properties that will animate as we move the mouse around the menu\n\n    this.animatableProperties = animatableProperties; // the item text\n\n    this.DOM.textInner = this.DOM.el.querySelector('.menu__item-textinner'); // create the image structure\n\n    this.layout(); // initialize some events\n\n    this.initEvents();\n  } // create the image structure\n  // we want to add/append to the menu item the following html:\n  // <div class=\"hover-reveal\">\n  //   <div class=\"hover-reveal__inner\" style=\"overflow: hidden;\">\n  //     <div class=\"hover-reveal__img\" style=\"background-image: url(pathToImage);\">\n  //     </div>\n  //   </div>\n  // </div>\n\n\n  _createClass(MenuItem, [{\n    key: \"layout\",\n    value: function layout() {\n      // this is the element that gets its position animated (and perhaps other properties like the rotation etc..)\n      this.DOM.reveal = document.createElement('div');\n      this.DOM.reveal.className = 'hover-reveal';\n      this.DOM.reveal.style.transformOrigin = '0% 0%'; // the next two elements could actually be only one, the image element\n      // adding an extra wrapper (revealInner) around the image element with overflow hidden, gives us the possibility to scale the image inside\n\n      this.DOM.revealInner = document.createElement('div');\n      this.DOM.revealInner.className = 'hover-reveal__inner';\n      this.DOM.revealImage = document.createElement('div');\n      this.DOM.revealImage.className = 'hover-reveal__img';\n      this.DOM.revealImage.style.backgroundImage = \"url(\".concat(images[this.inMenuPosition][1], \")\");\n      this.DOM.revealInner.appendChild(this.DOM.revealImage);\n      this.DOM.reveal.appendChild(this.DOM.revealInner);\n      this.DOM.el.appendChild(this.DOM.reveal);\n    }\n  }, {\n    key: \"getMouseArea\",\n    value: function getMouseArea() {\n      return this.bounds.el.top + this.bounds.el.height / 2 <= window.innerHeight / 2 ? 'up' : 'down';\n    } // calculate the position/size of both the menu item and reveal element\n\n  }, {\n    key: \"calcBounds\",\n    value: function calcBounds() {\n      this.bounds = {\n        el: this.DOM.el.getBoundingClientRect(),\n        reveal: this.DOM.reveal.getBoundingClientRect()\n      };\n    } // bind some events\n\n  }, {\n    key: \"initEvents\",\n    value: function initEvents() {\n      var _this = this;\n\n      this.mouseenterFn = function (ev) {\n        // show the image element\n        _this.showImage();\n\n        _this.firstRAFCycle = true;\n        _this.DOM.reveal.style.transformOrigin = \"0% \".concat(_this.mouseArea === 'up' ? 0 : 100, \"%\"); // start the render loop animation (rAF)\n\n        _this.loopRender();\n      };\n\n      this.mouseleaveFn = function () {\n        // stop the render loop animation (rAF)\n        _this.stopRendering(); // hide the image element\n\n\n        _this.hideImage();\n      };\n\n      this.DOM.el.addEventListener('mouseenter', this.mouseenterFn);\n      this.DOM.el.addEventListener('mouseleave', this.mouseleaveFn);\n    } // show the image element\n\n  }, {\n    key: \"showImage\",\n    value: function showImage() {\n      var _this2 = this;\n\n      // kill any current tweens\n      _gsap.gsap.killTweensOf(this.DOM.revealInner);\n\n      _gsap.gsap.killTweensOf(this.DOM.revealImage);\n\n      this.tl = _gsap.gsap.timeline({\n        onStart: function onStart() {\n          // show both image and its parent element\n          _this2.DOM.reveal.style.opacity = _this2.DOM.revealInner.style.opacity = 1; // set a high z-index value so image appears on top of other elements\n\n          _gsap.gsap.set(_this2.DOM.el, {\n            zIndex: images.length\n          });\n        }\n      }) // animate the image wrap\n      .to(this.DOM.revealInner, 0.6, {\n        ease: 'Expo.easeOut',\n        startAt: {\n          scale: 0.6\n        },\n        scale: 1\n      }) // animate the image element\n      .to(this.DOM.revealImage, 0.6, {\n        ease: 'Expo.easeOut',\n        startAt: {\n          scale: 1.4\n        },\n        scale: 1\n      }, 0);\n    } // hide the image element\n\n  }, {\n    key: \"hideImage\",\n    value: function hideImage() {\n      var _this3 = this;\n\n      // kill any current tweens\n      _gsap.gsap.killTweensOf(this.DOM.revealInner);\n\n      _gsap.gsap.killTweensOf(this.DOM.revealImage);\n\n      this.tl = _gsap.gsap.timeline({\n        onStart: function onStart() {\n          _gsap.gsap.set(_this3.DOM.el, {\n            zIndex: 90\n          });\n        },\n        onComplete: function onComplete() {\n          _gsap.gsap.set(_this3.DOM.reveal, {\n            opacity: 1\n          });\n        }\n      }).to(this.DOM.revealInner, 0.6, {\n        ease: 'Expo.easeOut',\n        scale: 0.6,\n        opacity: 0\n      }).to(this.DOM.revealImage, 0.6, {\n        ease: 'Expo.easeOut',\n        scale: 1.4\n      }, 0);\n    } // start the render loop animation (rAF)\n\n  }, {\n    key: \"loopRender\",\n    value: function loopRender() {\n      var _this4 = this;\n\n      if (!this.requestId) {\n        this.requestId = requestAnimationFrame(function () {\n          return _this4.render();\n        });\n      }\n    } // stop the render loop animation (rAF)\n\n  }, {\n    key: \"stopRendering\",\n    value: function stopRendering() {\n      if (this.requestId) {\n        window.cancelAnimationFrame(this.requestId);\n        this.requestId = undefined;\n      }\n    } // translate the item as the mouse moves\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.requestId = undefined;\n\n      if (this.firstRAFCycle) {\n        // calculate position/sizes the first time\n        this.calcBounds();\n        this.mouseArea = this.getMouseArea();\n      } // calculate the mouse distance (current vs previous cycle)\n\n\n      var mouseDistanceX = (0, _utils.clamp)(Math.abs(mousePosCache.x - mousepos.x), 0, 100); // direction where the mouse is moving\n\n      direction = {\n        x: mousePosCache.x - mousepos.x,\n        y: mousePosCache.y - mousepos.y\n      }; // updated cache values\n\n      mousePosCache = {\n        x: mousepos.x,\n        y: mousepos.y\n      }; // new translation values\n\n      this.animatableProperties.tx.current = Math.abs(mousepos.x - this.bounds.el.left);\n      this.animatableProperties.ty.current = this.mouseArea === 'up' ? Math.abs(mousepos.y - this.bounds.el.top) : Math.abs(mousepos.y - this.bounds.el.top) - this.bounds.reveal.height; // new rotation value\n\n      this.animatableProperties.rotation.current = this.firstRAFCycle ? 0 : (0, _utils.map)(mouseDistanceX, 0, 175, 0, direction.x < 0 ? this.mouseArea === 'up' ? 60 : -60 : this.mouseArea === 'up' ? -60 : 60); // new filter value\n\n      this.animatableProperties.brightness.current = this.firstRAFCycle ? 1 : (0, _utils.map)(mouseDistanceX, 0, 100, 1, 8); // set up the interpolated values\n      // for the first cycle, both the interpolated values need to be the same so there's no \"lerped\" animation between the previous and current state\n\n      this.animatableProperties.tx.previous = this.firstRAFCycle ? this.animatableProperties.tx.current : (0, _utils.lerp)(this.animatableProperties.tx.previous, this.animatableProperties.tx.current, this.animatableProperties.tx.amt);\n      this.animatableProperties.ty.previous = this.firstRAFCycle ? this.animatableProperties.ty.current : (0, _utils.lerp)(this.animatableProperties.ty.previous, this.animatableProperties.ty.current, this.animatableProperties.ty.amt);\n      this.animatableProperties.rotation.previous = this.firstRAFCycle ? this.animatableProperties.rotation.current : (0, _utils.lerp)(this.animatableProperties.rotation.previous, this.animatableProperties.rotation.current, this.animatableProperties.rotation.amt);\n      this.animatableProperties.brightness.previous = this.firstRAFCycle ? this.animatableProperties.brightness.current : (0, _utils.lerp)(this.animatableProperties.brightness.previous, this.animatableProperties.brightness.current, this.animatableProperties.brightness.amt); // set styles\n\n      _gsap.gsap.set(this.DOM.reveal, {\n        x: this.animatableProperties.tx.previous,\n        y: this.animatableProperties.ty.previous,\n        rotation: this.animatableProperties.rotation.previous,\n        filter: \"brightness(\".concat(this.animatableProperties.brightness.previous, \")\")\n      }); // loop\n\n\n      this.firstRAFCycle = false;\n      this.loopRender();\n    }\n  }]);\n\n  return MenuItem;\n}();\n\nexports.default = MenuItem;"},"sourceMaps":null,"error":null,"hash":"367f6ea17e54ba10252abc501d5062c1","cacheData":{"env":{}}}